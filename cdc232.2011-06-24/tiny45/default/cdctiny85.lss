
cdctiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000c18  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  0080006c  0080006c  00000cb8  2**0
                  ALLOC
  3 .stab         00000c60  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000133  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00001a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000164b  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000906  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007cd  00000000  00000000  00003a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b4  00000000  00000000  00004260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000705  00000000  00000000  00004414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c2e  00000000  00000000  00004b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00005747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	fa c3       	rjmp	.+2036   	; 0x7f8 <__vector_1>
   4:	0f c2       	rjmp	.+1054   	; 0x424 <__vector_2>
   6:	05 c4       	rjmp	.+2058   	; 0x812 <__vector_3>
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
   a:	6a c0       	rjmp	.+212    	; 0xe0 <__bad_interrupt>
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
   e:	68 c0       	rjmp	.+208    	; 0xe0 <__bad_interrupt>
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
  12:	66 c0       	rjmp	.+204    	; 0xe0 <__bad_interrupt>
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
  16:	64 c0       	rjmp	.+200    	; 0xe0 <__bad_interrupt>
  18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
  1a:	62 c0       	rjmp	.+196    	; 0xe0 <__bad_interrupt>
  1c:	1c c4       	rjmp	.+2104   	; 0x856 <__vector_14>

0000001e <usbDescriptorDevice>:
  1e:	12 01 10 01 02 00 00 08 c0 16 e1 05 00 01 01 02     ................
  2e:	00 01                                               ..

00000030 <usbDescriptorStringDevice>:
  30:	10 03 55 00 53 00 42 00 2d 00 32 00 33 00 32 00     ..U.S.B.-.2.3.2.

00000040 <usbDescriptorStringVendor>:
  40:	22 03 77 00 77 00 77 00 2e 00 72 00 65 00 63 00     ".w.w.w...r.e.c.
  50:	75 00 72 00 73 00 69 00 6f 00 6e 00 2e 00 6a 00     u.r.s.i.o.n...j.
  60:	70 00                                               p.

00000062 <usbDescriptorString0>:
  62:	04 03 09 04                                         ....

00000066 <configDescrCDC>:
  66:	09 02 43 00 02 01 00 80 32 09 04 00 00 01 02 02     ..C.....2.......
  76:	01 00 05 24 00 10 01 04 24 02 02 05 24 06 00 01     ...$....$...$...
  86:	05 24 01 03 01 07 05 83 03 08 00 ff 09 04 01 00     .$..............
  96:	02 0a 00 00 00 07 05 01 02 02 00 00 07 05 81 02     ................
  a6:	08 00 00 00                                         ....

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf e5       	ldi	r28, 0x5F	; 95
  b0:	d2 e0       	ldi	r29, 0x02	; 2
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	a0 e6       	ldi	r26, 0x60	; 96
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e8 e1       	ldi	r30, 0x18	; 24
  be:	fc e0       	ldi	r31, 0x0C	; 12
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
  c2:	05 90       	lpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	ac 36       	cpi	r26, 0x6C	; 108
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
  cc:	11 e0       	ldi	r17, 0x01	; 1
  ce:	ac e6       	ldi	r26, 0x6C	; 108
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	a0 34       	cpi	r26, 0x40	; 64
  d8:	b1 07       	cpc	r27, r17
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	1b d5       	rcall	.+2614   	; 0xb14 <main>
  de:	9a c5       	rjmp	.+2868   	; 0xc14 <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	cf 93       	push	r28
  e8:	38 2f       	mov	r19, r24
  ea:	79 2f       	mov	r23, r25
  ec:	c6 2f       	mov	r28, r22
  ee:	7a 01       	movw	r14, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
  f0:	fa 01       	movw	r30, r20
  f2:	80 81       	ld	r24, Z
  f4:	84 ff       	sbrs	r24, 4
  f6:	05 c0       	rjmp	.+10     	; 0x102 <usbGenericSetInterrupt+0x20>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
  f8:	21 81       	ldd	r18, Z+1	; 0x01
  fa:	88 e8       	ldi	r24, 0x88	; 136
  fc:	28 27       	eor	r18, r24
  fe:	21 83       	std	Z+1, r18	; 0x01
 100:	03 c0       	rjmp	.+6      	; 0x108 <usbGenericSetInterrupt+0x26>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 102:	8a e5       	ldi	r24, 0x5A	; 90
 104:	fa 01       	movw	r30, r20
 106:	80 83       	st	Z, r24
    }
    p = txStatus->buffer + 1;
 108:	c7 01       	movw	r24, r14
 10a:	02 96       	adiw	r24, 0x02	; 2
 10c:	e3 2f       	mov	r30, r19
 10e:	f7 2f       	mov	r31, r23
 110:	dc 01       	movw	r26, r24

/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
 112:	3c 2f       	mov	r19, r28
 114:	38 0f       	add	r19, r24
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 116:	21 91       	ld	r18, Z+
 118:	2d 93       	st	X+, r18

/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
 11a:	23 2f       	mov	r18, r19
 11c:	2a 1b       	sub	r18, r26
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 11e:	12 16       	cp	r1, r18
 120:	d4 f3       	brlt	.-12     	; 0x116 <usbGenericSetInterrupt+0x34>
    usbCrc16Append(&txStatus->buffer[1], len);
 122:	6c 2f       	mov	r22, r28
 124:	68 d1       	rcall	.+720    	; 0x3f6 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 126:	cc 5f       	subi	r28, 0xFC	; 252
 128:	f7 01       	movw	r30, r14
 12a:	c0 83       	st	Z, r28
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
 12c:	cf 91       	pop	r28
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	08 95       	ret

00000134 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 134:	4c e7       	ldi	r20, 0x7C	; 124
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	d4 cf       	rjmp	.-88     	; 0xe2 <usbGenericSetInterrupt>

0000013a <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
 13a:	47 ea       	ldi	r20, 0xA7	; 167
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	d1 cf       	rjmp	.-94     	; 0xe2 <usbGenericSetInterrupt>

00000140 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	cf 93       	push	r28
schar   len;
uchar   i;

    len = usbRxLen - 3;
 146:	60 91 8d 00 	lds	r22, 0x008D
 14a:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 14c:	67 fd       	sbrc	r22, 7
 14e:	b9 c0       	rjmp	.+370    	; 0x2c2 <__stack+0x63>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 150:	80 91 8a 00 	lds	r24, 0x008A
 154:	9c e0       	ldi	r25, 0x0C	; 12
 156:	e9 2e       	mov	r14, r25
 158:	f1 2c       	mov	r15, r1
 15a:	e8 1a       	sub	r14, r24
 15c:	f1 08       	sbc	r15, r1
 15e:	81 e9       	ldi	r24, 0x91	; 145
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	e8 0e       	add	r14, r24
 164:	f9 1e       	adc	r15, r25
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 166:	80 91 89 00 	lds	r24, 0x0089
 16a:	80 31       	cpi	r24, 0x10	; 16
 16c:	18 f4       	brcc	.+6      	; 0x174 <usbPoll+0x34>
        usbFunctionWriteOut(data, len);
 16e:	c7 01       	movw	r24, r14
 170:	b4 d4       	rcall	.+2408   	; 0xada <usbFunctionWriteOut>
 172:	a1 c0       	rjmp	.+322    	; 0x2b6 <__stack+0x57>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 174:	8d 32       	cpi	r24, 0x2D	; 45
 176:	09 f0       	breq	.+2      	; 0x17a <usbPoll+0x3a>
 178:	8f c0       	rjmp	.+286    	; 0x298 <__stack+0x39>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 17a:	68 30       	cpi	r22, 0x08	; 8
 17c:	09 f0       	breq	.+2      	; 0x180 <usbPoll+0x40>
 17e:	9b c0       	rjmp	.+310    	; 0x2b6 <__stack+0x57>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	80 93 71 00 	sts	0x0071, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 186:	8a e5       	ldi	r24, 0x5A	; 90
 188:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 18c:	10 92 6c 00 	sts	0x006C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 190:	f7 01       	movw	r30, r14
 192:	80 81       	ld	r24, Z
 194:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 196:	19 f0       	breq	.+6      	; 0x19e <usbPoll+0x5e>
            replyLen = usbFunctionSetup(data);
 198:	c7 01       	movw	r24, r14
 19a:	59 d4       	rcall	.+2226   	; 0xa4e <usbFunctionSetup>
 19c:	69 c0       	rjmp	.+210    	; 0x270 <__stack+0x11>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 19e:	f7 01       	movw	r30, r14
 1a0:	92 81       	ldd	r25, Z+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 1a2:	10 92 7a 00 	sts	0x007A, r1
    SWITCH_START(rq->bRequest)
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 1a8:	81 11       	cpse	r24, r1
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <usbPoll+0x78>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 1ac:	10 92 7b 00 	sts	0x007B, r1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 1b0:	2a e7       	ldi	r18, 0x7A	; 122
 1b2:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	58 c0       	rjmp	.+176    	; 0x268 <__stack+0x9>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 1b8:	85 30       	cpi	r24, 0x05	; 5
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <usbPoll+0x82>
        usbNewDeviceAddr = value;
 1bc:	90 93 8e 00 	sts	0x008E, r25
 1c0:	50 c0       	rjmp	.+160    	; 0x262 <__stack+0x3>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 1c2:	86 30       	cpi	r24, 0x06	; 6
 1c4:	b1 f5       	brne	.+108    	; 0x232 <usbPoll+0xf2>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 1c6:	f7 01       	movw	r30, r14
 1c8:	83 81       	ldd	r24, Z+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	41 f4       	brne	.+16     	; 0x1de <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 1ce:	8e e1       	ldi	r24, 0x1E	; 30
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 8c 00 	sts	0x008C, r25
 1d6:	80 93 8b 00 	sts	0x008B, r24
 1da:	82 e1       	ldi	r24, 0x12	; 18
 1dc:	26 c0       	rjmp	.+76     	; 0x22a <usbPoll+0xea>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <usbPoll+0xa8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 1e2:	c7 01       	movw	r24, r14
 1e4:	03 d4       	rcall	.+2054   	; 0x9ec <usbFunctionDescriptor>
 1e6:	21 c0       	rjmp	.+66     	; 0x22a <usbPoll+0xea>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	f1 f4       	brne	.+60     	; 0x228 <usbPoll+0xe8>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 1ec:	91 11       	cpse	r25, r1
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 1f0:	82 e6       	ldi	r24, 0x62	; 98
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 8c 00 	sts	0x008C, r25
 1f8:	80 93 8b 00 	sts	0x008B, r24
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	15 c0       	rjmp	.+42     	; 0x22a <usbPoll+0xea>
        SWITCH_CASE(1)
 200:	91 30       	cpi	r25, 0x01	; 1
 202:	41 f4       	brne	.+16     	; 0x214 <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 204:	80 e4       	ldi	r24, 0x40	; 64
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 8c 00 	sts	0x008C, r25
 20c:	80 93 8b 00 	sts	0x008B, r24
 210:	82 e2       	ldi	r24, 0x22	; 34
 212:	0b c0       	rjmp	.+22     	; 0x22a <usbPoll+0xea>
        SWITCH_CASE(2)
 214:	92 30       	cpi	r25, 0x02	; 2
 216:	41 f4       	brne	.+16     	; 0x228 <usbPoll+0xe8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 8c 00 	sts	0x008C, r25
 220:	80 93 8b 00 	sts	0x008B, r24
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	01 c0       	rjmp	.+2      	; 0x22a <usbPoll+0xea>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 22a:	90 e4       	ldi	r25, 0x40	; 64
 22c:	90 93 6c 00 	sts	0x006C, r25
 230:	1f c0       	rjmp	.+62     	; 0x270 <__stack+0x11>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 232:	88 30       	cpi	r24, 0x08	; 8
 234:	79 f0       	breq	.+30     	; 0x254 <usbPoll+0x114>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 236:	89 30       	cpi	r24, 0x09	; 9
 238:	19 f4       	brne	.+6      	; 0x240 <usbPoll+0x100>
        usbConfiguration = value;
 23a:	90 93 90 00 	sts	0x0090, r25
 23e:	11 c0       	rjmp	.+34     	; 0x262 <__stack+0x3>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 240:	8a 30       	cpi	r24, 0x0A	; 10
 242:	59 f0       	breq	.+22     	; 0x25a <usbPoll+0x11a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 244:	8b 30       	cpi	r24, 0x0B	; 11
 246:	69 f4       	brne	.+26     	; 0x262 <__stack+0x3>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 248:	8b e4       	ldi	r24, 0x4B	; 75
 24a:	80 93 7d 00 	sts	0x007D, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 24e:	80 93 a8 00 	sts	0x00A8, r24
 252:	07 c0       	rjmp	.+14     	; 0x262 <__stack+0x3>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 254:	20 e9       	ldi	r18, 0x90	; 144
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <usbPoll+0x11e>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 25a:	2a e7       	ldi	r18, 0x7A	; 122
 25c:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	03 c0       	rjmp	.+6      	; 0x268 <__stack+0x9>
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
 262:	2a e7       	ldi	r18, 0x7A	; 122
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 268:	30 93 8c 00 	sts	0x008C, r19
 26c:	20 93 8b 00 	sts	0x008B, r18
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 270:	f7 01       	movw	r30, r14
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 272:	8f 3f       	cpi	r24, 0xFF	; 255
 274:	39 f4       	brne	.+14     	; 0x284 <__stack+0x25>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 276:	90 81       	ld	r25, Z
 278:	97 fd       	sbrc	r25, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 27a:	86 81       	ldd	r24, Z+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 27c:	90 e8       	ldi	r25, 0x80	; 128
 27e:	90 93 6c 00 	sts	0x006C, r25
 282:	07 c0       	rjmp	.+14     	; 0x292 <__stack+0x33>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 284:	97 81       	ldd	r25, Z+7	; 0x07
 286:	91 11       	cpse	r25, r1
 288:	04 c0       	rjmp	.+8      	; 0x292 <__stack+0x33>
 28a:	96 81       	ldd	r25, Z+6	; 0x06
 28c:	98 17       	cp	r25, r24
 28e:	08 f4       	brcc	.+2      	; 0x292 <__stack+0x33>
 290:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 292:	80 93 61 00 	sts	0x0061, r24
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <__stack+0x57>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 298:	80 91 6c 00 	lds	r24, 0x006C
 29c:	87 ff       	sbrs	r24, 7
 29e:	0b c0       	rjmp	.+22     	; 0x2b6 <__stack+0x57>
            uchar rval = usbFunctionWrite(data, len);
 2a0:	c7 01       	movw	r24, r14
 2a2:	0d d4       	rcall	.+2074   	; 0xabe <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 2a4:	8f 3f       	cpi	r24, 0xFF	; 255
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <__stack+0x51>
                usbTxLen = USBPID_STALL;
 2a8:	8e e1       	ldi	r24, 0x1E	; 30
 2aa:	80 93 60 00 	sts	0x0060, r24
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <__stack+0x57>
            }else if(rval != 0){    /* This was the final package */
 2b0:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 2b2:	10 92 61 00 	sts	0x0061, r1
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
 2b6:	80 91 8d 00 	lds	r24, 0x008D
 2ba:	18 16       	cp	r1, r24
 2bc:	14 f4       	brge	.+4      	; 0x2c2 <__stack+0x63>
            usbRxLen = 0;
 2be:	10 92 8d 00 	sts	0x008D, r1
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 2c2:	80 91 60 00 	lds	r24, 0x0060
 2c6:	84 ff       	sbrs	r24, 4
 2c8:	56 c0       	rjmp	.+172    	; 0x376 <__stack+0x117>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 2ca:	80 91 61 00 	lds	r24, 0x0061
 2ce:	8f 3f       	cpi	r24, 0xFF	; 255
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <__stack+0x75>
 2d2:	51 c0       	rjmp	.+162    	; 0x376 <__stack+0x117>
 2d4:	c8 2f       	mov	r28, r24
 2d6:	89 30       	cpi	r24, 0x09	; 9
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <__stack+0x7d>
 2da:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 2dc:	8c 1b       	sub	r24, r28
 2de:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 2e2:	80 91 71 00 	lds	r24, 0x0071
 2e6:	98 e8       	ldi	r25, 0x88	; 136
 2e8:	89 27       	eor	r24, r25
 2ea:	80 93 71 00 	sts	0x0071, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 2ee:	cc 23       	and	r28, r28
 2f0:	89 f1       	breq	.+98     	; 0x354 <__stack+0xf5>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 2f2:	80 91 6c 00 	lds	r24, 0x006C
 2f6:	87 ff       	sbrs	r24, 7
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <__stack+0xa7>
            len = usbFunctionRead(data, len);
 2fa:	6c 2f       	mov	r22, r28
 2fc:	82 e7       	ldi	r24, 0x72	; 114
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	cf d3       	rcall	.+1950   	; 0xaa0 <usbFunctionRead>
 302:	c8 2f       	mov	r28, r24
 304:	25 c0       	rjmp	.+74     	; 0x350 <__stack+0xf1>
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 306:	40 91 8b 00 	lds	r20, 0x008B
 30a:	50 91 8c 00 	lds	r21, 0x008C
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 30e:	86 ff       	sbrs	r24, 6
 310:	0b c0       	rjmp	.+22     	; 0x328 <__stack+0xc9>
 312:	fa 01       	movw	r30, r20
 314:	a2 e7       	ldi	r26, 0x72	; 114
 316:	b0 e0       	ldi	r27, 0x00	; 0
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 318:	8c 2f       	mov	r24, r28
 31a:	8a 0f       	add	r24, r26
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 31c:	94 91       	lpm	r25, Z
                    *data++ = c;
 31e:	9d 93       	st	X+, r25
                    r++;
 320:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 322:	8a 13       	cpse	r24, r26
 324:	fb cf       	rjmp	.-10     	; 0x31c <__stack+0xbd>
 326:	09 c0       	rjmp	.+18     	; 0x33a <__stack+0xdb>
 328:	da 01       	movw	r26, r20
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 32a:	e2 e7       	ldi	r30, 0x72	; 114
 32c:	f0 e0       	ldi	r31, 0x00	; 0
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 32e:	8c 2f       	mov	r24, r28
 330:	8e 0f       	add	r24, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 332:	9d 91       	ld	r25, X+
 334:	91 93       	st	Z+, r25
                }while(--i);
 336:	8e 13       	cpse	r24, r30
 338:	fc cf       	rjmp	.-8      	; 0x332 <__stack+0xd3>
#endif
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
 33a:	2c 2f       	mov	r18, r28
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	24 0f       	add	r18, r20
 346:	35 1f       	adc	r19, r21
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
                }while(--i);
            }
            usbMsgPtr = r;
 348:	30 93 8c 00 	sts	0x008C, r19
 34c:	20 93 8b 00 	sts	0x008B, r18
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 350:	c9 30       	cpi	r28, 0x09	; 9
 352:	58 f4       	brcc	.+22     	; 0x36a <__stack+0x10b>
        usbCrc16Append(&usbTxBuf[1], len);
 354:	6c 2f       	mov	r22, r28
 356:	82 e7       	ldi	r24, 0x72	; 114
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	4d d0       	rcall	.+154    	; 0x3f6 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 35c:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 35e:	cc 30       	cpi	r28, 0x0C	; 12
 360:	41 f0       	breq	.+16     	; 0x372 <__stack+0x113>
            usbMsgLen = USB_NO_MSG;
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	80 93 61 00 	sts	0x0061, r24
 368:	04 c0       	rjmp	.+8      	; 0x372 <__stack+0x113>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	80 93 61 00 	sts	0x0061, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 370:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 372:	c0 93 60 00 	sts	0x0060, r28
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 376:	84 e1       	ldi	r24, 0x14	; 20
        uchar usbLineStatus = USBIN & USBMASK;
 378:	96 b3       	in	r25, 0x16	; 22
 37a:	98 71       	andi	r25, 0x18	; 24
        if(usbLineStatus != 0)  /* SE0 has ended */
 37c:	31 f4       	brne	.+12     	; 0x38a <__stack+0x12b>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 37e:	81 50       	subi	r24, 0x01	; 1
 380:	d9 f7       	brne	.-10     	; 0x378 <__stack+0x119>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 382:	10 92 8e 00 	sts	0x008E, r1
    usbDeviceAddr = 0;
 386:	10 92 88 00 	sts	0x0088, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 38a:	c1 e0       	ldi	r28, 0x01	; 1
 38c:	81 11       	cpse	r24, r1
 38e:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
 390:	80 91 6d 00 	lds	r24, 0x006D
 394:	8c 17       	cp	r24, r28
 396:	39 f0       	breq	.+14     	; 0x3a6 <__stack+0x147>
        USB_RESET_HOOK(isReset);
 398:	c1 11       	cpse	r28, r1
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <__stack+0x143>
 39c:	f8 94       	cli
 39e:	b8 d1       	rcall	.+880    	; 0x710 <calibrateOscillator>
 3a0:	78 94       	sei
        wasReset = isReset;
 3a2:	c0 93 6d 00 	sts	0x006D, r28
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 3a6:	cf 91       	pop	r28
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	08 95       	ret

000003ae <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 3ae:	ab 9a       	sbi	0x15, 3	; 21
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 3b0:	8b b7       	in	r24, 0x3b	; 59
 3b2:	80 62       	ori	r24, 0x20	; 32
 3b4:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3b6:	8b e4       	ldi	r24, 0x4B	; 75
 3b8:	80 93 7d 00 	sts	0x007D, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3bc:	80 93 a8 00 	sts	0x00A8, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 3c0:	8a e5       	ldi	r24, 0x5A	; 90
 3c2:	80 93 7c 00 	sts	0x007C, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
 3c6:	80 93 a7 00 	sts	0x00A7, r24
 3ca:	08 95       	ret

000003cc <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 3cc:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 3ce:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 3d4:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 3d6:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 3d8:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 3da:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <usbCrcLoopEntry>

000003de <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 3de:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 3e0:	82 27       	eor	r24, r18

000003e2 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 3e2:	97 95       	ror	r25
    ror     resCrcL
 3e4:	87 95       	ror	r24
    brcs    usbCrcNoXor
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <usbCrcNoXor>
    eor     resCrcL, polyL
 3e8:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 3ea:	95 27       	eor	r25, r21

000003ec <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 3ec:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 3ee:	c8 f3       	brcs	.-14     	; 0x3e2 <usbCrcBitLoop>

000003f0 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 3f0:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 3f2:	a8 f3       	brcs	.-22     	; 0x3de <usbCrcByteLoop>

000003f4 <usbCrcReady>:
usbCrcReady:
    ret
 3f4:	08 95       	ret

000003f6 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 3f6:	ea df       	rcall	.-44     	; 0x3cc <usbCrc16>
    st      ptr+, resCrcL
 3f8:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 3fa:	9d 93       	st	X+, r25
    ret
 3fc:	08 95       	ret

000003fe <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
 3fe:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
 400:	88 27       	eor	r24, r24
    clr     cnt16H
 402:	99 27       	eor	r25, r25

00000404 <usbMFTime16>:
usbMFTime16:
    dec     cntH
 404:	aa 95       	dec	r26
    breq    usbMFTimeout
 406:	69 f0       	breq	.+26     	; 0x422 <usbMFTimeout>

00000408 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
 408:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
 40a:	e1 f3       	breq	.-8      	; 0x404 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
 40c:	b4 99       	sbic	0x16, 4	; 22
    rjmp    usbMFWaitStrobe ;[4]
 40e:	fc cf       	rjmp	.-8      	; 0x408 <usbMFWaitStrobe>

00000410 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
 410:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    usbMFWaitIdle   ;2
 412:	fe cf       	rjmp	.-4      	; 0x410 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
 414:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
 416:	99 27       	eor	r25, r25

00000418 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
 418:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
 41a:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
 41c:	11 f0       	breq	.+4      	; 0x422 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
 41e:	a8 71       	andi	r26, 0x18	; 24
    brne    usbMFWaitLoop   ;[5]
 420:	d9 f7       	brne	.-10     	; 0x418 <usbMFWaitLoop>

00000422 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
 422:	08 95       	ret

00000424 <__vector_2>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
 424:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
 426:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
 428:	cf 93       	push	r28

0000042a <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 42a:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 42c:	b4 9b       	sbis	0x16, 4	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 42e:	e9 f7       	brne	.-6      	; 0x42a <waitForJ>

00000430 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 430:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK              ;[-14]
 432:	0b c0       	rjmp	.+22     	; 0x44a <foundK>
    sbis    USBIN, USBMINUS
 434:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK
 436:	09 c0       	rjmp	.+18     	; 0x44a <foundK>
    sbis    USBIN, USBMINUS
 438:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK
 43a:	07 c0       	rjmp	.+14     	; 0x44a <foundK>
    sbis    USBIN, USBMINUS
 43c:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK
 43e:	05 c0       	rjmp	.+10     	; 0x44a <foundK>
    sbis    USBIN, USBMINUS
 440:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK
 442:	03 c0       	rjmp	.+6      	; 0x44a <foundK>
    sbis    USBIN, USBMINUS
 444:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    foundK
 446:	01 c0       	rjmp	.+2      	; 0x44a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 448:	d8 c0       	rjmp	.+432    	; 0x5fa <sofError>

0000044a <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
 44a:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
 44c:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
 44e:	c0 91 8a 00 	lds	r28, 0x008A
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
 452:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
 454:	cf 56       	subi	r28, 0x6F	; 111
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
 456:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
 458:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 45a:	b4 9b       	sbis	0x16, 4	; 22
    rjmp    haveTwoBitsK        ;[-1]
 45c:	03 c0       	rjmp	.+6      	; 0x464 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
 45e:	df 91       	pop	r29
    pop     r0                  ;[2]
 460:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 462:	e6 cf       	rjmp	.-52     	; 0x430 <waitForK>

00000464 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
 464:	2f 93       	push	r18
    push    x1              ;[3]
 466:	0f 93       	push	r16
    push    x2              ;[5]
 468:	1f 93       	push	r17
    push    x3              ;[7]
 46a:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
 46c:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
 46e:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
 470:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
 472:	04 fb       	bst	r16, 4
    bld     shift, 0        ;[13]
 474:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
 476:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
 478:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
 47a:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
 47c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
 47e:	65 c0       	rjmp	.+202    	; 0x54a <rxbit1>

00000480 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
 480:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
 482:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
 484:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
 486:	54 fd       	sbrc	r21, 4
    lpm                     ;[059] optional nop3; modifies r0
 488:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
 48a:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
 48c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
 48e:	04 fb       	bst	r16, 4
    bld     shift, 5        ;[063]
 490:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
 492:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
 494:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
 496:	b1 f0       	breq	.+44     	; 0x4c4 <unstuff5>
    eor     phase, x1       ;[067]
 498:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
 49a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
 49c:	14 fb       	bst	r17, 4
    bld     shift, 6        ;[070]
 49e:	26 f9       	bld	r18, 6

000004a0 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
 4a0:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
 4a2:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
 4a4:	f0 f0       	brcs	.+60     	; 0x4e2 <unstuff6>

000004a6 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
 4a8:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
 4aa:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
 4ac:	04 fb       	bst	r16, 4
    bld     shift, 7        ;[079]
 4ae:	27 f9       	bld	r18, 7

000004b0 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
 4b0:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
 4b2:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
 4b4:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
 4b6:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
 4b8:	e8 f5       	brcc	.+122    	; 0x534 <rxLoop>

000004ba <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
 4ba:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
 4bc:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
 4be:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
 4c0:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
 4c2:	f6 cf       	rjmp	.-20     	; 0x4b0 <didUnstuff7>

000004c4 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
 4c4:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
 4c6:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
 4c8:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
 4ca:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
 4cc:	10 2f       	mov	r17, r16
    nop                     ;[073]
 4ce:	00 00       	nop
    nop2                    ;[074]
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
 4d2:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
 4d4:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
 4d6:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
 4d8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
 4da:	14 fb       	bst	r17, 4
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
 4dc:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
 4de:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
 4e0:	e2 cf       	rjmp	.-60     	; 0x4a6 <didUnstuff5>

000004e2 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
 4e2:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
 4e4:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
 4e6:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
 4ea:	da cf       	rjmp	.-76     	; 0x4a0 <didUnstuff6>

000004ec <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
 4ec:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
 4ee:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
 4f0:	18 71       	andi	r17, 0x18	; 24
    in      r0, USBIN       ;[017] <-- phase
 4f2:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
 4f4:	69 f1       	breq	.+90     	; 0x550 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
 4f6:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
 4f8:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
 4fa:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
 4fc:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
 4fe:	28 c0       	rjmp	.+80     	; 0x550 <didUnstuff0>

00000500 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
 500:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
 502:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
 504:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
 506:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
 508:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
 50a:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
 50c:	29 c0       	rjmp	.+82     	; 0x560 <didUnstuff1>

0000050e <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
 50e:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
 510:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
 512:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
 514:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
 516:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
 518:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
 51a:	2d c0       	rjmp	.+90     	; 0x576 <didUnstuff2>

0000051c <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
 51c:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
 51e:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
 520:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
 522:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
 524:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
 526:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
 528:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
 52a:	2e c0       	rjmp	.+92     	; 0x588 <didUnstuff3>

0000052c <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
 52c:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
 52e:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
 530:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
 532:	30 c0       	rjmp	.+96     	; 0x594 <didUnstuff4>

00000534 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 534:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
 536:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
 538:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
 53a:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
 53c:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
 53e:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
 540:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
 542:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
 544:	14 fb       	bst	r17, 4
    bld     shift, 0        ;[009]
 546:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
 548:	29 7f       	andi	r18, 0xF9	; 249

0000054a <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
 54a:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
 54c:	79 f2       	breq	.-98     	; 0x4ec <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
 54e:	18 71       	andi	r17, 0x18	; 24

00000550 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
 550:	59 f1       	breq	.+86     	; 0x5a8 <se0>
    eor     r0, x2          ;[015]
 552:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
 554:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
 556:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
 558:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
 55a:	04 fb       	bst	r16, 4
    bld     shift, 1        ;[020]
 55c:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
 55e:	23 7f       	andi	r18, 0xF3	; 243

00000560 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
 560:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
 562:	71 f2       	breq	.-100    	; 0x500 <unstuff1>
    eor     r0, x1          ;[024]
 564:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
 566:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
 568:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
 56a:	d0 f0       	brcs	.+52     	; 0x5a0 <overflow>
    in      r0, USBIN       ;[028] <-- phase
 56c:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
 56e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
 570:	14 fb       	bst	r17, 4
    bld     shift, 2        ;[031]
 572:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
 574:	27 7e       	andi	r18, 0xE7	; 231

00000576 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
 576:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
 578:	51 f2       	breq	.-108    	; 0x50e <unstuff2>
    eor     r0, x2          ;[035]
 57a:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
 57c:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
 57e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
 580:	04 fb       	bst	r16, 4
    in      r0, USBIN       ;[039] <-- phase
 582:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
 584:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
 586:	2f 7c       	andi	r18, 0xCF	; 207

00000588 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
 588:	49 f2       	breq	.-110    	; 0x51c <unstuff3>
    nop                     ;[043]
 58a:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
 58c:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
 58e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
 590:	14 fb       	bst	r17, 4
    bld     shift, 4        ;[047]
 592:	24 f9       	bld	r18, 4

00000594 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
 594:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
 596:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
 598:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
 59a:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
 59c:	39 f2       	breq	.-114    	; 0x52c <unstuff4>
    rjmp    continueWithBit5;[053]
 59e:	70 cf       	rjmp	.-288    	; 0x480 <continueWithBit5>

000005a0 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 5a0:	10 e2       	ldi	r17, 0x20	; 32
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 5a2:	1a bf       	out	0x3a, r17	; 58

000005a4 <ignorePacket>:
ignorePacket:
    clr     token
 5a4:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 5a6:	1c c0       	rjmp	.+56     	; 0x5e0 <storeTokenAndReturn>

000005a8 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 5a8:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 5aa:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 5ac:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 5ae:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 5b0:	10 e2       	ldi	r17, 0x20	; 32
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 5b2:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 5b4:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 5b6:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 5b8:	21 f1       	breq	.+72     	; 0x602 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 5ba:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 5bc:	11 f1       	breq	.+68     	; 0x602 <handleData>
    lds     shift, usbDeviceAddr;[17]
 5be:	20 91 88 00 	lds	r18, 0x0088
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 5c2:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 5c4:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 5c6:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 5c8:	ed cf       	rjmp	.-38     	; 0x5a4 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 5ca:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 5cc:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 5ce:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 5d0:	69 f1       	breq	.+90     	; 0x62c <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 5d2:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 5d4:	11 f0       	breq	.+4      	; 0x5da <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 5d6:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 5d8:	29 f7       	brne	.-54     	; 0x5a4 <ignorePacket>

000005da <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
 5da:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
 5de:	04 2f       	mov	r16, r20

000005e0 <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 5e0:	00 93 8f 00 	sts	0x008F, r16

000005e4 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 5e4:	3f 91       	pop	r19
 5e6:	5f 91       	pop	r21
 5e8:	4f 91       	pop	r20
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	2f 91       	pop	r18
 5f0:	df 91       	pop	r29
 5f2:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
 5f4:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 5f6:	c5 fd       	sbrc	r28, 5
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 5f8:	18 cf       	rjmp	.-464    	; 0x42a <waitForJ>

000005fa <sofError>:
sofError:
    POP_RETI                    ;macro call
 5fa:	cf 91       	pop	r28
 5fc:	cf bf       	out	0x3f, r28	; 63
 5fe:	cf 91       	pop	r28
    reti
 600:	18 95       	reti

00000602 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 602:	20 91 8f 00 	lds	r18, 0x008F
    tst     shift               ;[20]
 606:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 608:	69 f3       	breq	.-38     	; 0x5e4 <doReturn>
    lds     x2, usbRxLen        ;[22]
 60a:	10 91 8d 00 	lds	r17, 0x008D
    tst     x2                  ;[24]
 60e:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 610:	d1 f5       	brne	.+116    	; 0x686 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 612:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 614:	d2 f1       	brmi	.+116    	; 0x68a <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 616:	30 93 8d 00 	sts	0x008D, r19
    sts     usbRxToken, shift   ;[30]
 61a:	20 93 89 00 	sts	0x0089, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 61e:	10 91 8a 00 	lds	r17, 0x008A
    ldi     cnt, USB_BUFSIZE    ;[34]
 622:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 624:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 626:	30 93 8a 00 	sts	0x008A, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 62a:	2f c0       	rjmp	.+94     	; 0x68a <sendAckAndReti>

0000062c <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 62c:	00 91 8d 00 	lds	r16, 0x008D
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 630:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 632:	4c f5       	brge	.+82     	; 0x686 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 634:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 636:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 638:	49 f4       	brne	.+18     	; 0x64c <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 63a:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 63e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 640:	25 c0       	rjmp	.+74     	; 0x68c <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 642:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 646:	c1 e7       	ldi	r28, 0x71	; 113
    ldi     YH, hi8(usbTxBuf)   ;[44]
 648:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 64a:	24 c0       	rjmp	.+72     	; 0x694 <usbSendAndReti>

0000064c <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 64c:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
 64e:	49 f0       	breq	.+18     	; 0x662 <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
 650:	30 91 7c 00 	lds	r19, 0x007C
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 654:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 656:	1a c0       	rjmp	.+52     	; 0x68c <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 658:	00 93 7c 00 	sts	0x007C, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 65c:	cd e7       	ldi	r28, 0x7D	; 125
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 65e:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 660:	19 c0       	rjmp	.+50     	; 0x694 <usbSendAndReti>

00000662 <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
 662:	30 91 a7 00 	lds	r19, 0x00A7
    sbrc    cnt, 4              ;[43]
 666:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
 668:	11 c0       	rjmp	.+34     	; 0x68c <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
 66a:	00 93 a7 00 	sts	0x00A7, r16
    ldi     YL, lo8(usbTxBuf3)  ;[47]
 66e:	c8 ea       	ldi	r28, 0xA8	; 168
    ldi     YH, hi8(usbTxBuf3)  ;[48]
 670:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
 672:	10 c0       	rjmp	.+32     	; 0x694 <usbSendAndReti>

00000674 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
 674:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
 676:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
 678:	00 c0       	rjmp	.+0      	; 0x67a <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
 67a:	21 c0       	rjmp	.+66     	; 0x6be <didStuff7>

0000067c <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
 67c:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 67e:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
 680:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
 682:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
 684:	14 c0       	rjmp	.+40     	; 0x6ae <didStuffN>

00000686 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
 686:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
 688:	01 c0       	rjmp	.+2      	; 0x68c <sendCntAndReti>

0000068a <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 68a:	32 ed       	ldi	r19, 0xD2	; 210

0000068c <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
 68c:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
 68e:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
 690:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 692:	32 e0       	ldi	r19, 0x02	; 2

00000694 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 694:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
 696:	18 61       	ori	r17, 0x18	; 24
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 698:	c4 9a       	sbi	0x18, 4	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 69a:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
 69c:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 69e:	58 e1       	ldi	r21, 0x18	; 24
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 6a0:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
 6a2:	4f ef       	ldi	r20, 0xFF	; 255

000006a4 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
 6a4:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
 6a6:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
 6a8:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
 6aa:	27 95       	ror	r18
    ror     x2              ;[1]
 6ac:	17 95       	ror	r17

000006ae <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 6ae:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 6b0:	28 f7       	brcc	.-54     	; 0x67c <bitstuffN>
    nop                     ;[4]
 6b2:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
 6b4:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
 6b6:	b0 f7       	brcc	.-20     	; 0x6a4 <bitloop>
    sbrs    shift, 0        ;[7]
 6b8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 6ba:	05 27       	eor	r16, r21
    ror     shift           ;[9]
 6bc:	27 95       	ror	r18

000006be <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
 6be:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
 6c0:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
 6c2:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
 6c4:	b8 f6       	brcc	.-82     	; 0x674 <bitstuff7>
    ld      shift, y+       ;[3]
 6c6:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
 6c8:	3a 95       	dec	r19
    brne    byteloop        ;[6]
 6ca:	61 f7       	brne	.-40     	; 0x6a4 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 6cc:	07 7e       	andi	r16, 0xE7	; 231
    lds     x2, usbNewDeviceAddr;[8]
 6ce:	10 91 8e 00 	lds	r17, 0x008E
    lsl     x2              ;[10] we compare with left shifted address
 6d2:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 6d4:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
 6d6:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
 6d8:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
 6da:	11 f0       	breq	.+4      	; 0x6e0 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 6dc:	10 93 88 00 	sts	0x0088, r17

000006e0 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
 6e0:	10 e2       	ldi	r17, 0x20	; 32
    USB_STORE_PENDING(x2)   ;[5]
 6e2:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
 6e4:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[7]
 6e6:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
 6e8:	17 7e       	andi	r17, 0xE7	; 231
    mov     x3, x1          ;[9]
 6ea:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
 6ec:	47 7e       	andi	r20, 0xE7	; 231
    ldi     x4, 4           ;[11]
 6ee:	54 e0       	ldi	r21, 0x04	; 4

000006f0 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
 6f0:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
 6f4:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
 6f6:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
 6f8:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 6fa:	74 cf       	rjmp	.-280    	; 0x5e4 <doReturn>

000006fc <oscInit>:

void    oscInit(void)
{
uchar   calibrationValue;

	calibrationValue	= eeprom_read_byte(0);
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	73 d2       	rcall	.+1254   	; 0xbe8 <__eerd_byte_tn85>
    if(calibrationValue != 0xff)
 702:	8f 3f       	cpi	r24, 0xFF	; 255
 704:	09 f0       	breq	.+2      	; 0x708 <oscInit+0xc>
 706:	02 c0       	rjmp	.+4      	; 0x70c <oscInit+0x10>
		OSCCAL	= calibrationValue;
	else {
#if USB_CFG_CLOCK_KHZ==12800
		OSCCAL	= 232;
#else
		OSCCAL	+= 4;		/*	8.00 -> 8.25MHz	*/
 708:	81 b7       	in	r24, 0x31	; 49
 70a:	8c 5f       	subi	r24, 0xFC	; 252
 70c:	81 bf       	out	0x31, r24	; 49
 70e:	08 95       	ret

00000710 <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	0f 93       	push	r16
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
uchar       trialValue = 0;
#endif
uchar		org;
int			err;

	org	= OSCCAL;						/* keep the original value				*/
 720:	01 b7       	in	r16, 0x31	; 49
										/* keep the current error ...			*/
	err	= usbMeasureFrameLength() - targetValue;
 722:	6d de       	rcall	.-806    	; 0x3fe <usbMeasureFrameLength>
 724:	84 53       	subi	r24, 0x34	; 52
 726:	99 40       	sbci	r25, 0x09	; 9
 728:	7c 01       	movw	r14, r24
 72a:	97 ff       	sbrs	r25, 7
 72c:	03 c0       	rjmp	.+6      	; 0x734 <calibrateOscillator+0x24>
 72e:	f1 94       	neg	r15
 730:	e1 94       	neg	r14
 732:	f1 08       	sbc	r15, r1
    if(err < 0)
        err = -err;

#if USB_CFG_CLOCK_KHZ==16500
    OSCCAL	= 0x98;        				/* select a split range  - O.Tamura		*/
 734:	88 e9       	ldi	r24, 0x98	; 152
 736:	81 bf       	out	0x31, r24	; 49
    x = usbMeasureFrameLength();
 738:	62 de       	rcall	.-828    	; 0x3fe <usbMeasureFrameLength>
    if(x < targetValue)
 73a:	84 33       	cpi	r24, 0x34	; 52
 73c:	99 40       	sbci	r25, 0x09	; 9
 73e:	14 f0       	brlt	.+4      	; 0x744 <calibrateOscillator+0x34>
#if USB_CFG_CLOCK_KHZ==12800
uchar       step = 32;
uchar       trialValue = 192;
#else
uchar       step = 64;
uchar       trialValue = 0;
 740:	c0 e0       	ldi	r28, 0x00	; 0
 742:	01 c0       	rjmp	.+2      	; 0x746 <calibrateOscillator+0x36>

#if USB_CFG_CLOCK_KHZ==16500
    OSCCAL	= 0x98;        				/* select a split range  - O.Tamura		*/
    x = usbMeasureFrameLength();
    if(x < targetValue)
        trialValue	= 128;
 744:	c0 e8       	ldi	r28, 0x80	; 128
#if USB_CFG_CLOCK_KHZ==12800
uchar       step = 32;
uchar       trialValue = 192;
#else
uchar       step = 64;
uchar       trialValue = 0;
 746:	87 e0       	ldi	r24, 0x07	; 7
 748:	c8 2e       	mov	r12, r24
 74a:	d1 2c       	mov	r13, r1
 74c:	d0 e4       	ldi	r29, 0x40	; 64
        trialValue	= 128;
#endif

	/* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 74e:	1c 2f       	mov	r17, r28
 750:	1d 0f       	add	r17, r29
 752:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
 754:	54 de       	rcall	.-856    	; 0x3fe <usbMeasureFrameLength>
 756:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
 758:	24 33       	cpi	r18, 0x34	; 52
 75a:	89 e0       	ldi	r24, 0x09	; 9
 75c:	38 07       	cpc	r19, r24
 75e:	0c f4       	brge	.+2      	; 0x762 <calibrateOscillator+0x52>
            trialValue += step;
 760:	c1 2f       	mov	r28, r17
        step >>= 1;
 762:	d6 95       	lsr	r29
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	c8 1a       	sub	r12, r24
 768:	d1 08       	sbc	r13, r1
    }while(step > 0);
 76a:	89 f7       	brne	.-30     	; 0x74e <calibrateOscillator+0x3e>
 76c:	24 53       	subi	r18, 0x34	; 52
 76e:	39 40       	sbci	r19, 0x09	; 9
 770:	37 ff       	sbrs	r19, 7
 772:	03 c0       	rjmp	.+6      	; 0x77a <calibrateOscillator+0x6a>
 774:	31 95       	neg	r19
 776:	21 95       	neg	r18
 778:	31 09       	sbc	r19, r1
	to the same host controller (by downstream broadcast packet). - O.Tamura
	*/
    x -= targetValue;
    if(x < 0)
        x = -x;
	if( x>err ) {
 77a:	e2 16       	cp	r14, r18
 77c:	f3 06       	cpc	r15, r19
 77e:	14 f4       	brge	.+4      	; 0x784 <calibrateOscillator+0x74>
		OSCCAL	= org;
 780:	01 bf       	out	0x31, r16	; 49
		return;
 782:	31 c0       	rjmp	.+98     	; 0x7e6 <calibrateOscillator+0xd6>

    /* We have a precision of +/- 2 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 2; OSCCAL <= trialValue + 2; OSCCAL++){
 784:	8c 2f       	mov	r24, r28
 786:	82 50       	subi	r24, 0x02	; 2
 788:	81 bf       	out	0x31, r24	; 49
 78a:	69 01       	movw	r12, r18
 78c:	ec 2e       	mov	r14, r28
 78e:	f1 2c       	mov	r15, r1
 790:	22 e0       	ldi	r18, 0x02	; 2
 792:	e2 0e       	add	r14, r18
 794:	f1 1c       	adc	r15, r1
 796:	10 c0       	rjmp	.+32     	; 0x7b8 <calibrateOscillator+0xa8>
        x = usbMeasureFrameLength() - targetValue;
 798:	32 de       	rcall	.-924    	; 0x3fe <usbMeasureFrameLength>
 79a:	84 53       	subi	r24, 0x34	; 52
 79c:	99 40       	sbci	r25, 0x09	; 9
 79e:	97 ff       	sbrs	r25, 7
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <calibrateOscillator+0x98>
 7a2:	91 95       	neg	r25
 7a4:	81 95       	neg	r24
 7a6:	91 09       	sbc	r25, r1
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 7a8:	8c 15       	cp	r24, r12
 7aa:	9d 05       	cpc	r25, r13
 7ac:	14 f4       	brge	.+4      	; 0x7b2 <calibrateOscillator+0xa2>
            optimumDev = x;
            optimumValue = OSCCAL;
 7ae:	c1 b7       	in	r28, 0x31	; 49
 7b0:	6c 01       	movw	r12, r24

    /* We have a precision of +/- 2 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 2; OSCCAL <= trialValue + 2; OSCCAL++){
 7b2:	81 b7       	in	r24, 0x31	; 49
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	81 bf       	out	0x31, r24	; 49
 7b8:	81 b7       	in	r24, 0x31	; 49
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	e8 16       	cp	r14, r24
 7be:	f9 06       	cpc	r15, r25
 7c0:	5c f7       	brge	.-42     	; 0x798 <calibrateOscillator+0x88>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 7c2:	c1 bf       	out	0x31, r28	; 49

	if( eeprom_read_byte(0)!=optimumValue )
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0f d2       	rcall	.+1054   	; 0xbe8 <__eerd_byte_tn85>
 7ca:	8c 17       	cp	r24, r28
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <calibrateOscillator+0xd6>
		eeprom_write_byte(0, optimumValue);
 7ce:	6c 2f       	mov	r22, r28
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
}
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
        }
    }
    OSCCAL = optimumValue;

	if( eeprom_read_byte(0)!=optimumValue )
		eeprom_write_byte(0, optimumValue);
 7e4:	09 c2       	rjmp	.+1042   	; 0xbf8 <__eewr_byte_tn85>
}
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	ff 90       	pop	r15
 7f0:	ef 90       	pop	r14
 7f2:	df 90       	pop	r13
 7f4:	cf 90       	pop	r12
 7f6:	08 95       	ret

000007f8 <__vector_1>:

UART_INTR_VECTOR:
#ifdef UART_INVERT
    sbis    UART_PIN, UART_CFG_RXD         ;1/2
#else
    sbic    UART_PIN, UART_CFG_RXD         ;1/2
 7f8:	b2 99       	sbic	0x16, 2	; 22
#endif
    reti                    ;4 
 7fa:	18 95       	reti

    out     GPIOR0, x1      ;1
 7fc:	01 bb       	out	0x11, r16	; 17

    in      x1, RX_DELAY    ;1  1st bit sampling delay
 7fe:	05 b5       	in	r16, 0x25	; 37
    out     TCNT1, x1       ;1
 800:	0f bd       	out	0x2f, r16	; 47
    ldi     x1, 9           ;1  set rx_bitcounter = 9
 802:	09 e0       	ldi	r16, 0x09	; 9
    out     OCR1C, x1       ;1
 804:	0d bd       	out	0x2d, r16	; 45
    ldi     x1, 7           ;1  start timer
 806:	07 e0       	ldi	r16, 0x07	; 7
    out     TCCR1, x1       ;1
 808:	00 bf       	out	0x30, r16	; 48

    ldi     x1, (1<<USB_INTR_ENABLE_BIT)  ;1
 80a:	00 e2       	ldi	r16, 0x20	; 32
    out     USB_INTR_ENABLE, x1  ;1   stop rx_pin interrupt
 80c:	0b bf       	out	0x3b, r16	; 59

    in      x1, GPIOR0      ;1
 80e:	01 b3       	in	r16, 0x11	; 17
    reti                    ;4   {14,14}
 810:	18 95       	reti

00000812 <__vector_3>:


SIG_OUTPUT_COMPARE1A:
    out     GPIOR0, x1      ;1
 812:	01 bb       	out	0x11, r16	; 17
    in      x1, SREG        ;1
 814:	0f b7       	in	r16, 0x3f	; 63
    out     GPIOR1, x1      ;1
 816:	02 bb       	out	0x12, r16	; 18

    in      x1, OCR1C       ;1  rx_bitcounter--
 818:	0d b5       	in	r16, 0x2d	; 45
    dec     x1              ;1
 81a:	0a 95       	dec	r16
    out     OCR1C, x1       ;1
 81c:	0d bd       	out	0x2d, r16	; 45
    breq    tm1_stopbit     ;1/2
 81e:	79 f0       	breq	.+30     	; 0x83e <tm1_stopbit>

    in      x1, OCR1B       ;1
 820:	0b b5       	in	r16, 0x2b	; 43
    lsr     x1              ;1  data shift
 822:	06 95       	lsr	r16
#ifdef UART_INVERT
    sbis    UART_PIN, UART_CFG_RXD         ;1/2
#else
    sbic    UART_PIN, UART_CFG_RXD         ;1/2
 824:	b2 99       	sbic	0x16, 2	; 22
#endif
    ori     x1, 0x80        ;1
 826:	00 68       	ori	r16, 0x80	; 128
    out     OCR1B, x1       ;1
 828:	0b bd       	out	0x2b, r16	; 43

    out     GPIOR2, x2      ;1
 82a:	13 bb       	out	0x13, r17	; 19
    in      x1, TCNT1       ;1
 82c:	0f b5       	in	r16, 0x2f	; 47
    in      x2, OCR1A       ;1
 82e:	1e b5       	in	r17, 0x2e	; 46
    sub     x1, x2          ;1
 830:	01 1b       	sub	r16, r17
    out     TCNT1, x1       ;1
 832:	0f bd       	out	0x2f, r16	; 47

    in      x2, GPIOR2      ;1
 834:	13 b3       	in	r17, 0x13	; 19
    in      x1, GPIOR1      ;1
 836:	02 b3       	in	r16, 0x12	; 18
    out     SREG, x1        ;1
 838:	0f bf       	out	0x3f, r16	; 63
    in      x1, GPIOR0      ;1
 83a:	01 b3       	in	r16, 0x11	; 17
    reti                    ;4
 83c:	18 95       	reti

0000083e <tm1_stopbit>:

tm1_stopbit:
    out     TCCR1, x1       ;1  stop timer1
 83e:	00 bf       	out	0x30, r16	; 48

    out     RX_READY, x1    ;1  rx_data ready flag
 840:	04 bd       	out	0x24, r16	; 36
    in      x1, OCR1B       ;1
 842:	0b b5       	in	r16, 0x2b	; 43
    out     EEDR, x1        ;1  rx_data
 844:	0d bb       	out	0x1d, r16	; 29

    ldi     x1, (1<<UART_INTR_PENDING_BIT)   ;1
 846:	00 e4       	ldi	r16, 0x40	; 64
    out     UART_INTR_PENDING, x1        ;1
 848:	0a bf       	out	0x3a, r16	; 58
    ldi     x1, (1<<USB_INTR_ENABLE_BIT)|(1<<UART_INTR_ENABLE_BIT)  ;1
 84a:	00 e6       	ldi	r16, 0x60	; 96
    out     USB_INTR_ENABLE, x1  ;1   enable rx_pin interrupt
 84c:	0b bf       	out	0x3b, r16	; 59

    in      x1, GPIOR1      ;1
 84e:	02 b3       	in	r16, 0x12	; 18
    out     SREG, x1        ;1
 850:	0f bf       	out	0x3f, r16	; 63
    in      x1, GPIOR0      ;1
 852:	01 b3       	in	r16, 0x11	; 17
    reti                    ;4   {23,25}
 854:	18 95       	reti

00000856 <__vector_14>:


SIG_USI_OVERFLOW:
    out     GPIOR0, x1     	;1
 856:	01 bb       	out	0x11, r16	; 17

	sbic	EEARL, 0		;1/2
 858:	f0 99       	sbic	0x1e, 0	; 30
	rjmp	usi_stopbit    	;2
 85a:	07 c0       	rjmp	.+14     	; 0x86a <usi_stopbit>

	ldi		x1, 0x4b		;1
 85c:	0b e4       	ldi	r16, 0x4B	; 75
	out		USISR, x1		;1
 85e:	0e b9       	out	0x0e, r16	; 14

	out		EEARL, x1		;1
 860:	0e bb       	out	0x1e, r16	; 30

	in		x1, OCR0B		;1
 862:	08 b5       	in	r16, 0x28	; 40
	out		USIDR, x1		;1  transfer upper 4 bits
 864:	0f b9       	out	0x0f, r16	; 15

    in      x1, GPIOR0     	;1
 866:	01 b3       	in	r16, 0x11	; 17
    reti                   	;4
 868:	18 95       	reti

0000086a <usi_stopbit>:

usi_stopbit:
	ldi		x1, (1<<USIOIF)	;1
 86a:	00 e4       	ldi	r16, 0x40	; 64
	out		USISR, x1		;1
 86c:	0e b9       	out	0x0e, r16	; 14

    ldi     x1, 0           ;1
 86e:	00 e0       	ldi	r16, 0x00	; 0
	out		TCCR0B, x1		;1  stop timer0
 870:	03 bf       	out	0x33, r16	; 51

    in      x1, GPIOR0		;1
 872:	01 b3       	in	r16, 0x11	; 17
    reti					;4   {13,13}
 874:	18 95       	reti

00000876 <bit_reverse>:
#define inb      r24
#define outb     r25
#endif

bit_reverse:
    rol     inb
 876:	88 1f       	adc	r24, r24
    ror     outb
 878:	97 95       	ror	r25
    rol     inb
 87a:	88 1f       	adc	r24, r24
    ror     outb
 87c:	97 95       	ror	r25
    rol     inb
 87e:	88 1f       	adc	r24, r24
    ror     outb
 880:	97 95       	ror	r25
    rol     inb
 882:	88 1f       	adc	r24, r24
    ror     outb
 884:	97 95       	ror	r25
    rol     inb
 886:	88 1f       	adc	r24, r24
    ror     outb
 888:	97 95       	ror	r25
    rol     inb
 88a:	88 1f       	adc	r24, r24
    ror     outb
 88c:	97 95       	ror	r25
    rol     inb
 88e:	88 1f       	adc	r24, r24
    ror     outb
 890:	97 95       	ror	r25
    rol     inb
 892:	88 1f       	adc	r24, r24
    ror     outb
 894:	97 95       	ror	r25
    mov     inb, outb
 896:	89 2f       	mov	r24, r25
    ret
 898:	08 95       	ret

0000089a <uartInit>:
uchar    urptr, uwptr, irptr, iwptr;
uchar    rx_buf[RX_SIZE], tx_buf[TX_SIZE];


void uartInit(uint baudrate)
{
 89a:	9c 01       	movw	r18, r24

    PRR     = (1<<PRADC);
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 bd       	out	0x20, r24	; 32
    ACSR    = (1<<ACD);
 8a0:	80 e8       	ldi	r24, 0x80	; 128
 8a2:	88 b9       	out	0x08, r24	; 8


    UART_DDR    |= (1<<UART_CFG_TXD);
 8a4:	b9 9a       	sbi	0x17, 1	; 23
    UART_DDR    &= ~(1<<UART_CFG_RXD);
 8a6:	ba 98       	cbi	0x17, 2	; 23

    UART_INTR_ENABLE    &= ~_BV(UART_INTR_ENABLE_BIT);
 8a8:	8b b7       	in	r24, 0x3b	; 59
 8aa:	8f 7b       	andi	r24, 0xBF	; 191
 8ac:	8b bf       	out	0x3b, r24	; 59

    TCCR0A   = 0;
 8ae:	1a bc       	out	0x2a, r1	; 42
    TCCR0B   = 0;
 8b0:	13 be       	out	0x33, r1	; 51
    TCCR1    = 0;
 8b2:	10 be       	out	0x30, r1	; 48

	USISR   = 0xe0;		          /* clear all interrupt flags */
 8b4:	80 ee       	ldi	r24, 0xE0	; 224
 8b6:	8e b9       	out	0x0e, r24	; 14
	USICR   = (1<<USIOIE)|(1<<USIWM0)|(1<<USICS0);	/* 3 wire mode       */
 8b8:	84 e5       	ldi	r24, 0x54	; 84
 8ba:	8d b9       	out	0x0d, r24	; 13

#ifdef UART_INVERT
	USIDR   = 0;
#else
	USIDR   = 0xff;
 8bc:	8f ef       	ldi	r24, 0xFF	; 255
 8be:	8f b9       	out	0x0f, r24	; 15
#endif

    OCR0A    =
    OCR1A    = ((F_CPU>>6)+(baudrate>>1)) / baudrate - 1;
 8c0:	b9 01       	movw	r22, r18
 8c2:	76 95       	lsr	r23
 8c4:	67 95       	ror	r22
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	6c 5e       	subi	r22, 0xEC	; 236
 8cc:	70 41       	sbci	r23, 0x10	; 16
 8ce:	8c 4f       	sbci	r24, 0xFC	; 252
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	66 d1       	rcall	.+716    	; 0xba4 <__udivmodsi4>
 8d8:	21 50       	subi	r18, 0x01	; 1
 8da:	2e bd       	out	0x2e, r18	; 46
	USIDR   = 0;
#else
	USIDR   = 0xff;
#endif

    OCR0A    =
 8dc:	29 bd       	out	0x29, r18	; 41
    OCR1A    = ((F_CPU>>6)+(baudrate>>1)) / baudrate - 1;
    OCR1C    = 0;
 8de:	1d bc       	out	0x2d, r1	; 45
    RX_DELAY = -((OCR1A+1)>>2);   /* 1.25 sample bit */
 8e0:	8e b5       	in	r24, 0x2e	; 46
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	95 95       	asr	r25
 8e8:	87 95       	ror	r24
 8ea:	95 95       	asr	r25
 8ec:	87 95       	ror	r24
 8ee:	81 95       	neg	r24
 8f0:	85 bd       	out	0x25, r24	; 37
	if( RX_DELAY<=OCR1A )
 8f2:	95 b5       	in	r25, 0x25	; 37
 8f4:	8e b5       	in	r24, 0x2e	; 46
 8f6:	89 17       	cp	r24, r25
 8f8:	18 f0       	brcs	.+6      	; 0x900 <uartInit+0x66>
		RX_DELAY	= OCR1A + 1;  /* for 1200 bps	 */
 8fa:	8e b5       	in	r24, 0x2e	; 46
 8fc:	8f 5f       	subi	r24, 0xFF	; 255
 8fe:	85 bd       	out	0x25, r24	; 37


    TCCR0A   = 2;                 /* CTC */
 900:	82 e0       	ldi	r24, 0x02	; 2
 902:	8a bd       	out	0x2a, r24	; 42
    RX_READY = 1;
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	84 bd       	out	0x24, r24	; 36
    TIMSK    = (1<<OCIE1A);
 908:	90 e4       	ldi	r25, 0x40	; 64
 90a:	99 bf       	out	0x39, r25	; 57

#if UART_CFG_RXD==2
	UART_INTR_CFG       = (UART_INTR_CFG&0xfe)|UART_INTR_CFG_SET;
 90c:	85 b7       	in	r24, 0x35	; 53
 90e:	8c 7f       	andi	r24, 0xFC	; 252
 910:	82 60       	ori	r24, 0x02	; 2
 912:	85 bf       	out	0x35, r24	; 53
#else
	UART_INTR_CFG       = UART_INTR_CFG_SET;
#endif
    UART_INTR_PENDING   = _BV(UART_INTR_PENDING_BIT);
 914:	9a bf       	out	0x3a, r25	; 58
    UART_INTR_ENABLE    |= _BV(UART_INTR_ENABLE_BIT);
 916:	8b b7       	in	r24, 0x3b	; 59
 918:	80 64       	ori	r24, 0x40	; 64
 91a:	8b bf       	out	0x3b, r24	; 59


    irptr    = 0;
 91c:	10 92 3e 01 	sts	0x013E, r1
    iwptr    = 0;
 920:	10 92 bb 00 	sts	0x00BB, r1
    urptr    = 0;
 924:	10 92 3c 01 	sts	0x013C, r1
    uwptr    = 0;
 928:	10 92 3d 01 	sts	0x013D, r1
 92c:	08 95       	ret

0000092e <uartPoll>:

void uartPoll(void)
{

    /*  device <= rs232c : receive  */
    if( RX_READY==0 && iwptr<HW_CDC_BULK_IN_SIZE ) {
 92e:	84 b5       	in	r24, 0x24	; 36
 930:	81 11       	cpse	r24, r1
 932:	0f c0       	rjmp	.+30     	; 0x952 <uartPoll+0x24>
 934:	80 91 bb 00 	lds	r24, 0x00BB
 938:	88 30       	cpi	r24, 0x08	; 8
 93a:	58 f4       	brcc	.+22     	; 0x952 <uartPoll+0x24>
	    rx_buf[iwptr++] = EEDR;
 93c:	9d b3       	in	r25, 0x1d	; 29
 93e:	e8 2f       	mov	r30, r24
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	ed 54       	subi	r30, 0x4D	; 77
 944:	ff 4f       	sbci	r31, 0xFF	; 255
 946:	90 83       	st	Z, r25
 948:	8f 5f       	subi	r24, 0xFF	; 255
 94a:	80 93 bb 00 	sts	0x00BB, r24
        RX_READY     = 1;
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	84 bd       	out	0x24, r24	; 36
    }

    /*  host <= device : transmit   */
    if( usbInterruptIsReady() && (iwptr||sendEmptyFrame) ) {
 952:	80 91 7c 00 	lds	r24, 0x007C
 956:	84 ff       	sbrs	r24, 4
 958:	12 c0       	rjmp	.+36     	; 0x97e <uartPoll+0x50>
 95a:	60 91 bb 00 	lds	r22, 0x00BB
 95e:	61 11       	cpse	r22, r1
 960:	04 c0       	rjmp	.+8      	; 0x96a <uartPoll+0x3c>
 962:	80 91 3f 01 	lds	r24, 0x013F
 966:	88 23       	and	r24, r24
 968:	51 f0       	breq	.+20     	; 0x97e <uartPoll+0x50>
        usbSetInterrupt(rx_buf, iwptr);
 96a:	83 eb       	ldi	r24, 0xB3	; 179
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	e2 db       	rcall	.-2108   	; 0x134 <usbSetInterrupt>
        sendEmptyFrame    = iwptr & HW_CDC_BULK_IN_SIZE;
 970:	80 91 bb 00 	lds	r24, 0x00BB
 974:	88 70       	andi	r24, 0x08	; 8
 976:	80 93 3f 01 	sts	0x013F, r24
        iwptr    = 0;
 97a:	10 92 bb 00 	sts	0x00BB, r1
    }

    /*  device => rs232c : transmit */
    if( TCCR0B==0 && uwptr!=irptr ) {
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	81 11       	cpse	r24, r1
 982:	33 c0       	rjmp	.+102    	; 0x9ea <uartPoll+0xbc>
 984:	e0 91 3e 01 	lds	r30, 0x013E
 988:	80 91 3d 01 	lds	r24, 0x013D
 98c:	8e 17       	cp	r24, r30
 98e:	69 f1       	breq	.+90     	; 0x9ea <uartPoll+0xbc>
        uchar       data;

        data    = bit_reverse( tx_buf[irptr] );
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	e4 54       	subi	r30, 0x44	; 68
 994:	ff 4f       	sbci	r31, 0xFF	; 255
 996:	80 81       	ld	r24, Z
 998:	6e df       	rcall	.-292    	; 0x876 <bit_reverse>
        irptr   = (irptr+1) & TX_MASK;
 99a:	90 91 3e 01 	lds	r25, 0x013E
 99e:	9f 5f       	subi	r25, 0xFF	; 255
 9a0:	9f 77       	andi	r25, 0x7F	; 127
 9a2:	90 93 3e 01 	sts	0x013E, r25

        TCNT0   = 0;
 9a6:	12 be       	out	0x32, r1	; 50
		USISR   = 0x4b;						/* interrupt at D4  */
 9a8:	9b e4       	ldi	r25, 0x4B	; 75
 9aa:	9e b9       	out	0x0e, r25	; 14
        EEARL   = 0;  	    				/* usi_phase  */
 9ac:	1e ba       	out	0x1e, r1	; 30

#ifdef UART_INVERT
		OCR0B   = ~((data<<4) | 0x0f);
#else
		OCR0B   = ((data<<4) | 0x0f);	    /* D4-7, stop bit   */
 9ae:	28 2f       	mov	r18, r24
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	44 e0       	ldi	r20, 0x04	; 4
 9b4:	22 0f       	add	r18, r18
 9b6:	33 1f       	adc	r19, r19
 9b8:	4a 95       	dec	r20
 9ba:	e1 f7       	brne	.-8      	; 0x9b4 <uartPoll+0x86>
 9bc:	2f 60       	ori	r18, 0x0F	; 15
 9be:	28 bd       	out	0x28, r18	; 40
#endif

        data    >>= 1;
 9c0:	86 95       	lsr	r24
        cli();
 9c2:	f8 94       	cli
#ifdef UART_INVERT
		USIDR   = ~data;
#else
		USIDR   = data;						/* startbit, D0-3   */
 9c4:	8f b9       	out	0x0f, r24	; 15
#endif
        TCCR0B  = 3;                        /* start timer0: 1/64 clk */
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	83 bf       	out	0x33, r24	; 51
        sei();
 9ca:	78 94       	sei

        /*  host => device : accept     */
        if( usbAllRequestsAreDisabled() && uartTxBytesFree()>=HW_CDC_BULK_OUT_SIZE ) {
 9cc:	80 91 8d 00 	lds	r24, 0x008D
 9d0:	87 ff       	sbrs	r24, 7
 9d2:	0b c0       	rjmp	.+22     	; 0x9ea <uartPoll+0xbc>
/* The following function returns the amount of bytes available in the TX
 * buffer before we have an overflow.
 */
static inline uchar uartTxBytesFree(void)
{
    return (irptr - uwptr - 1) & TX_MASK;
 9d4:	80 91 3e 01 	lds	r24, 0x013E
 9d8:	81 50       	subi	r24, 0x01	; 1
 9da:	90 91 3d 01 	lds	r25, 0x013D
 9de:	89 1b       	sub	r24, r25
 9e0:	8f 77       	andi	r24, 0x7F	; 127
 9e2:	82 30       	cpi	r24, 0x02	; 2
 9e4:	10 f0       	brcs	.+4      	; 0x9ea <uartPoll+0xbc>
            usbEnableAllRequests();
 9e6:	10 92 8d 00 	sts	0x008D, r1
 9ea:	08 95       	ret

000009ec <usbFunctionDescriptor>:
};

uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
 9ec:	fc 01       	movw	r30, r24
 9ee:	83 81       	ldd	r24, Z+3	; 0x03
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	49 f4       	brne	.+18     	; 0xa06 <usbFunctionDescriptor+0x1a>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
 9f4:	8e e1       	ldi	r24, 0x1E	; 30
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	90 93 8c 00 	sts	0x008C, r25
 9fc:	80 93 8b 00 	sts	0x008B, r24
        return usbDescriptorDevice[0];
 a00:	80 91 1e 00 	lds	r24, 0x001E
 a04:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
 a06:	86 e6       	ldi	r24, 0x66	; 102
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	90 93 8c 00 	sts	0x008C, r25
 a0e:	80 93 8b 00 	sts	0x008B, r24
        return sizeof(configDescrCDC);
 a12:	83 e4       	ldi	r24, 0x43	; 67
    }
}
 a14:	08 95       	ret

00000a16 <delay_ms>:
uchar               sendEmptyFrame;
static uchar        intr3Status;    /* used to control interrupt endpoint transmissions */

static usbWord_t    baud;

void delay_ms(uint8_t ms) {
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	00 d0       	rcall	.+0      	; 0xa1c <delay_ms+0x6>
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
    uint16_t delay_count = F_CPU / 17500;
    volatile uint16_t i; 
    while (ms != 0) {
 a20:	0f c0       	rjmp	.+30     	; 0xa40 <delay_ms+0x2a>
        for (i=0; i != delay_count; i++);
 a22:	1a 82       	std	Y+2, r1	; 0x02
 a24:	19 82       	std	Y+1, r1	; 0x01
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <delay_ms+0x1e>
 a28:	29 81       	ldd	r18, Y+1	; 0x01
 a2a:	3a 81       	ldd	r19, Y+2	; 0x02
 a2c:	2f 5f       	subi	r18, 0xFF	; 255
 a2e:	3f 4f       	sbci	r19, 0xFF	; 255
 a30:	3a 83       	std	Y+2, r19	; 0x02
 a32:	29 83       	std	Y+1, r18	; 0x01
 a34:	29 81       	ldd	r18, Y+1	; 0x01
 a36:	3a 81       	ldd	r19, Y+2	; 0x02
 a38:	2e 3a       	cpi	r18, 0xAE	; 174
 a3a:	33 40       	sbci	r19, 0x03	; 3
 a3c:	a9 f7       	brne	.-22     	; 0xa28 <delay_ms+0x12>
            ms--;
 a3e:	81 50       	subi	r24, 0x01	; 1
static usbWord_t    baud;

void delay_ms(uint8_t ms) {
    uint16_t delay_count = F_CPU / 17500;
    volatile uint16_t i; 
    while (ms != 0) {
 a40:	81 11       	cpse	r24, r1
 a42:	ef cf       	rjmp	.-34     	; 0xa22 <delay_ms+0xc>
        for (i=0; i != delay_count; i++);
            ms--;
    }
}
 a44:	0f 90       	pop	r0
 a46:	0f 90       	pop	r0
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	08 95       	ret

00000a4e <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
 a4e:	ef 92       	push	r14
 a50:	ff 92       	push	r15
 a52:	7c 01       	movw	r14, r24
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 a54:	fc 01       	movw	r30, r24
 a56:	80 81       	ld	r24, Z
 a58:	80 76       	andi	r24, 0x60	; 96
 a5a:	80 32       	cpi	r24, 0x20	; 32
 a5c:	09 f0       	breq	.+2      	; 0xa60 <usbFunctionSetup+0x12>
 a5e:	1a c0       	rjmp	.+52     	; 0xa94 <usbFunctionSetup+0x46>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
 a60:	f7 01       	movw	r30, r14
 a62:	81 81       	ldd	r24, Z+1	; 0x01
 a64:	98 2f       	mov	r25, r24
 a66:	90 52       	subi	r25, 0x20	; 32
 a68:	92 30       	cpi	r25, 0x02	; 2
 a6a:	b0 f0       	brcs	.+44     	; 0xa98 <usbFunctionSetup+0x4a>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }

        if(rq->bRequest == SET_CONTROL_LINE_STATE){
 a6c:	82 32       	cpi	r24, 0x22	; 34
 a6e:	59 f4       	brne	.+22     	; 0xa86 <usbFunctionSetup+0x38>
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */


            OUT_HI(PORTB,USB_CFG_DTR_BIT);
 a70:	c5 9a       	sbi	0x18, 5	; 24
            delay_ms(100);
 a72:	84 e6       	ldi	r24, 0x64	; 100
 a74:	d0 df       	rcall	.-96     	; 0xa16 <delay_ms>
            OUT_LOW(PORTB,USB_CFG_DTR_BIT);
 a76:	c5 98       	cbi	0x18, 5	; 24

            if( intr3Status==0 )
 a78:	80 91 6e 00 	lds	r24, 0x006E
 a7c:	81 11       	cpse	r24, r1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <usbFunctionSetup+0x38>
                intr3Status = 2;
 a80:	82 e0       	ldi	r24, 0x02	; 2
 a82:	80 93 6e 00 	sts	0x006E, r24
        }

        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
 a86:	f7 01       	movw	r30, r14
 a88:	80 81       	ld	r24, Z
 a8a:	87 fd       	sbrc	r24, 7
 a8c:	03 c0       	rjmp	.+6      	; 0xa94 <usbFunctionSetup+0x46>
            sendEmptyFrame  = 1;
 a8e:	81 e0       	ldi	r24, 0x01	; 1
 a90:	80 93 3f 01 	sts	0x013F, r24
    }

    return 0;
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <usbFunctionSetup+0x4c>
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
 a98:	8f ef       	ldi	r24, 0xFF	; 255
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
            sendEmptyFrame  = 1;
    }

    return 0;
}
 a9a:	ff 90       	pop	r15
 a9c:	ef 90       	pop	r14
 a9e:	08 95       	ret

00000aa0 <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
 aa0:	fc 01       	movw	r30, r24

    data[0] = baud.bytes[0];
 aa2:	80 91 6f 00 	lds	r24, 0x006F
 aa6:	80 83       	st	Z, r24
    data[1] = baud.bytes[1];
 aa8:	80 91 70 00 	lds	r24, 0x0070
 aac:	81 83       	std	Z+1, r24	; 0x01
    data[2] = 0;
 aae:	12 82       	std	Z+2, r1	; 0x02
    data[3] = 0;
 ab0:	13 82       	std	Z+3, r1	; 0x03
    data[4] = 0;
 ab2:	14 82       	std	Z+4, r1	; 0x04
    data[5] = 0;
 ab4:	15 82       	std	Z+5, r1	; 0x05
    data[6] = 8;
 ab6:	88 e0       	ldi	r24, 0x08	; 8
 ab8:	86 83       	std	Z+6, r24	; 0x06

    return 7;
}
 aba:	87 e0       	ldi	r24, 0x07	; 7
 abc:	08 95       	ret

00000abe <usbFunctionWrite>:

uchar usbFunctionWrite( uchar *data, uchar len )
{

    /*    SET_LINE_CODING    */
    baud.bytes[0] = data[0];
 abe:	fc 01       	movw	r30, r24
 ac0:	20 81       	ld	r18, Z
 ac2:	20 93 6f 00 	sts	0x006F, r18
    baud.bytes[1] = data[1];
 ac6:	81 81       	ldd	r24, Z+1	; 0x01
 ac8:	80 93 70 00 	sts	0x0070, r24

    uartInit(baud.word);
 acc:	80 91 6f 00 	lds	r24, 0x006F
 ad0:	90 91 70 00 	lds	r25, 0x0070
 ad4:	e2 de       	rcall	.-572    	; 0x89a <uartInit>

    return 1;
}
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	08 95       	ret

00000ada <usbFunctionWriteOut>:

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char	*/
    for( ; len; len-- ) {
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <usbFunctionWriteOut+0x1c>
        tx_buf[uwptr++] = *data++;
 adc:	fc 01       	movw	r30, r24
 ade:	31 91       	ld	r19, Z+
 ae0:	cf 01       	movw	r24, r30
 ae2:	e2 2f       	mov	r30, r18
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	e4 54       	subi	r30, 0x44	; 68
 ae8:	ff 4f       	sbci	r31, 0xFF	; 255
 aea:	30 83       	st	Z, r19
 aec:	2f 5f       	subi	r18, 0xFF	; 255
        uwptr    &= TX_MASK;
 aee:	2f 77       	andi	r18, 0x7F	; 127
 af0:	20 93 3d 01 	sts	0x013D, r18

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char	*/
    for( ; len; len-- ) {
 af4:	61 50       	subi	r22, 0x01	; 1
 af6:	20 91 3d 01 	lds	r18, 0x013D
 afa:	61 11       	cpse	r22, r1
 afc:	ef cf       	rjmp	.-34     	; 0xadc <usbFunctionWriteOut+0x2>
 afe:	80 91 3e 01 	lds	r24, 0x013E
 b02:	81 50       	subi	r24, 0x01	; 1
 b04:	82 1b       	sub	r24, r18
 b06:	8f 77       	andi	r24, 0x7F	; 127
        tx_buf[uwptr++] = *data++;
        uwptr    &= TX_MASK;
    }

    /*  postpone receiving next data    */
    if( uartTxBytesFree()<HW_CDC_BULK_OUT_SIZE )
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <usbFunctionWriteOut+0x38>
        usbDisableAllRequests();
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	80 93 8d 00 	sts	0x008D, r24
 b12:	08 95       	ret

00000b14 <main>:
}


int main(void)
{
    wdt_enable(WDTO_1S);
 b14:	2e e0       	ldi	r18, 0x0E	; 14
 b16:	88 e1       	ldi	r24, 0x18	; 24
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
 b1e:	a8 95       	wdr
 b20:	81 bd       	out	0x21, r24	; 33
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	21 bd       	out	0x21, r18	; 33
#if USB_CFG_HAVE_MEASURE_FRAME_LENGTH
	oscInit();
 b26:	ea dd       	rcall	.-1068   	; 0x6fc <oscInit>

static void hardwareInit(void)
{

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT)|(1<<USB_CFG_DTR_BIT));
 b28:	87 ec       	ldi	r24, 0xC7	; 199
 b2a:	88 bb       	out	0x18, r24	; 24
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT)|(1<<USB_CFG_DTR_BIT);
 b2c:	88 e3       	ldi	r24, 0x38	; 56
 b2e:	87 bb       	out	0x17, r24	; 23
#endif

    /* 250 ms disconnect */
    wdt_reset();
 b30:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b32:	27 ea       	ldi	r18, 0xA7	; 167
 b34:	86 e9       	ldi	r24, 0x96	; 150
 b36:	9c e0       	ldi	r25, 0x0C	; 12
 b38:	21 50       	subi	r18, 0x01	; 1
 b3a:	80 40       	sbci	r24, 0x00	; 0
 b3c:	90 40       	sbci	r25, 0x00	; 0
 b3e:	e1 f7       	brne	.-8      	; 0xb38 <main+0x24>
 b40:	00 c0       	rjmp	.+0      	; 0xb42 <main+0x2e>
 b42:	00 00       	nop
    _delay_ms(250);

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0;      /*  remove USB reset condition */
 b44:	17 ba       	out	0x17, r1	; 23
#endif

    /*    USART configuration    */
    baud.word  = UART_DEFAULT_BPS;
 b46:	80 ec       	ldi	r24, 0xC0	; 192
 b48:	92 e1       	ldi	r25, 0x12	; 18
 b4a:	90 93 70 00 	sts	0x0070, r25
 b4e:	80 93 6f 00 	sts	0x006F, r24
    uartInit(baud.word);
 b52:	a3 de       	rcall	.-698    	; 0x89a <uartInit>
    SET_OUT(DDRB,USB_CFG_DTR_BIT);
 b54:	bd 9a       	sbi	0x17, 5	; 23
#if USB_CFG_HAVE_MEASURE_FRAME_LENGTH
	oscInit();
#endif
    odDebugInit();
    hardwareInit();
    usbInit();
 b56:	2b dc       	rcall	.-1962   	; 0x3ae <usbInit>

    intr3Status = 0;
 b58:	10 92 6e 00 	sts	0x006E, r1
    sendEmptyFrame  = 0;
 b5c:	10 92 3f 01 	sts	0x013F, r1

    sei();
 b60:	78 94       	sei
    for(;;){    /* main event loop */
        wdt_reset();
 b62:	a8 95       	wdr
        usbPoll();
 b64:	ed da       	rcall	.-2598   	; 0x140 <usbPoll>
        uartPoll();
 b66:	e3 de       	rcall	.-570    	; 0x92e <uartPoll>

        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 b68:	80 91 6e 00 	lds	r24, 0x006E
 b6c:	88 23       	and	r24, r24
 b6e:	c9 f3       	breq	.-14     	; 0xb62 <main+0x4e>
 b70:	80 91 a7 00 	lds	r24, 0x00A7
 b74:	84 ff       	sbrs	r24, 4
 b76:	f5 cf       	rjmp	.-22     	; 0xb62 <main+0x4e>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            
            OUT_HI(PORTB,USB_CFG_DTR_BIT);
 b78:	c5 9a       	sbi	0x18, 5	; 24
            delay_ms(100);
 b7a:	84 e6       	ldi	r24, 0x64	; 100
 b7c:	4c df       	rcall	.-360    	; 0xa16 <delay_ms>
            OUT_LOW(PORTB,USB_CFG_DTR_BIT);
 b7e:	c5 98       	cbi	0x18, 5	; 24



            if(intr3Status == 2){
 b80:	80 91 6e 00 	lds	r24, 0x006E
 b84:	82 30       	cpi	r24, 0x02	; 2
 b86:	21 f4       	brne	.+8      	; 0xb90 <main+0x7c>
                usbSetInterrupt3(serialStateNotification, 8);
 b88:	68 e0       	ldi	r22, 0x08	; 8
 b8a:	82 e6       	ldi	r24, 0x62	; 98
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	03 c0       	rjmp	.+6      	; 0xb96 <main+0x82>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	8a e6       	ldi	r24, 0x6A	; 106
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	d1 da       	rcall	.-2654   	; 0x13a <usbSetInterrupt3>
            }
            intr3Status--;
 b98:	80 91 6e 00 	lds	r24, 0x006E
 b9c:	81 50       	subi	r24, 0x01	; 1
 b9e:	80 93 6e 00 	sts	0x006E, r24
 ba2:	df cf       	rjmp	.-66     	; 0xb62 <main+0x4e>

00000ba4 <__udivmodsi4>:
 ba4:	a1 e2       	ldi	r26, 0x21	; 33
 ba6:	1a 2e       	mov	r1, r26
 ba8:	aa 1b       	sub	r26, r26
 baa:	bb 1b       	sub	r27, r27
 bac:	fd 01       	movw	r30, r26
 bae:	0d c0       	rjmp	.+26     	; 0xbca <__udivmodsi4_ep>

00000bb0 <__udivmodsi4_loop>:
 bb0:	aa 1f       	adc	r26, r26
 bb2:	bb 1f       	adc	r27, r27
 bb4:	ee 1f       	adc	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	a2 17       	cp	r26, r18
 bba:	b3 07       	cpc	r27, r19
 bbc:	e4 07       	cpc	r30, r20
 bbe:	f5 07       	cpc	r31, r21
 bc0:	20 f0       	brcs	.+8      	; 0xbca <__udivmodsi4_ep>
 bc2:	a2 1b       	sub	r26, r18
 bc4:	b3 0b       	sbc	r27, r19
 bc6:	e4 0b       	sbc	r30, r20
 bc8:	f5 0b       	sbc	r31, r21

00000bca <__udivmodsi4_ep>:
 bca:	66 1f       	adc	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	1a 94       	dec	r1
 bd4:	69 f7       	brne	.-38     	; 0xbb0 <__udivmodsi4_loop>
 bd6:	60 95       	com	r22
 bd8:	70 95       	com	r23
 bda:	80 95       	com	r24
 bdc:	90 95       	com	r25
 bde:	9b 01       	movw	r18, r22
 be0:	ac 01       	movw	r20, r24
 be2:	bd 01       	movw	r22, r26
 be4:	cf 01       	movw	r24, r30
 be6:	08 95       	ret

00000be8 <__eerd_byte_tn85>:
 be8:	e1 99       	sbic	0x1c, 1	; 28
 bea:	fe cf       	rjmp	.-4      	; 0xbe8 <__eerd_byte_tn85>
 bec:	9f bb       	out	0x1f, r25	; 31
 bee:	8e bb       	out	0x1e, r24	; 30
 bf0:	e0 9a       	sbi	0x1c, 0	; 28
 bf2:	99 27       	eor	r25, r25
 bf4:	8d b3       	in	r24, 0x1d	; 29
 bf6:	08 95       	ret

00000bf8 <__eewr_byte_tn85>:
 bf8:	26 2f       	mov	r18, r22

00000bfa <__eewr_r18_tn85>:
 bfa:	e1 99       	sbic	0x1c, 1	; 28
 bfc:	fe cf       	rjmp	.-4      	; 0xbfa <__eewr_r18_tn85>
 bfe:	1c ba       	out	0x1c, r1	; 28
 c00:	9f bb       	out	0x1f, r25	; 31
 c02:	8e bb       	out	0x1e, r24	; 30
 c04:	2d bb       	out	0x1d, r18	; 29
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	e2 9a       	sbi	0x1c, 2	; 28
 c0c:	e1 9a       	sbi	0x1c, 1	; 28
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	01 96       	adiw	r24, 0x01	; 1
 c12:	08 95       	ret

00000c14 <_exit>:
 c14:	f8 94       	cli

00000c16 <__stop_program>:
 c16:	ff cf       	rjmp	.-2      	; 0xc16 <__stop_program>
